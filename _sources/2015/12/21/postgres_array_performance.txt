Postgres Array vs Join benchmark
==================================

.. author:: default
.. categories:: none
.. tags:: python, postgresql
.. comments::


Here is little experiment to measure postgresql array's performance.

.. code-block:: python

    from peewee import *
    from myapp import db
    from playhouse.postgres_ext import ArrayField, ForeignKeyField
    
    
    class BaseModel(Model):
        class Meta:
            database = db
            only_save_dirty = True
    
    
    class Post(BaseModel):
        tags = ArrayField(CharField, default=[], index=True)
    
    
    class Tag(BaseModel):
        name = CharField()
    
    
    class PostTag(BaseModel):
        post = ForeignKeyField(Post)
        tag = ForeignKeyField(Tag)
    
    
    def setup():
        no_of_posts = 1000
        no_of_tags = 100
        setup_logging()
    
        for t in (PostTag, Tag, Post):
            if t.table_exists():
                t.drop_table()
        for t in (Tag, Post, PostTag):
            t.create_table()
    
        for i in xrange(1, no_of_tags):
            Tag.create(name='tag-%d' % i)
    
        for i in xrange(1, no_of_posts):
            tags = [('tag-%d' % j) for j in xrange(1, no_of_tags) if (i % j) == 0]
            post = Post.create(tags=tags)
            for tag in post.tags:
                PostTag.create(post=post, tag=tag.split('-')[1])
   
    
    def test_join():
        # => SELECT Count(post.id) FROM post INNER JOIN posttag ON (post.id = posttag.post_id) \
        #    WHERE (posttag.tag_id = 8);
        return Post.select().join(PostTag).join(Tag).where(Tag.id == '8').count()
    
    
    def test_array():
        # => SELECT Count("id") FROM post WHERE tags @> '{tag-8}';
        return Post.select().where(Post.tags.contains('tag-8')).count()
    

Here are the numbers

.. code-block:: bash

    $ python -i bench.py
    >>> setup()
    $ python -mtimeit -s'import bench' 'bench.test_join()'
    1000 loops, best of 3: 516 usec per loop
    $ python -mtimeit -s'import bench' 'bench.test_array()'
    1000 loops, best of 3: 1.32 msec per loop
